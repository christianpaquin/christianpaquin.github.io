<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-05-15T10:55:11-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Christian’s Corner</title><subtitle>Sharing some information about my work at Microsoft Research on cryptography, identity, and security.</subtitle><entry><title type="html">U-Prove JSON Framework Overview</title><link href="http://localhost:4000/2023-04-03-uprove-json-framework-overview.html" rel="alternate" type="text/html" title="U-Prove JSON Framework Overview" /><published>2023-04-03T00:00:00-04:00</published><updated>2023-04-03T00:00:00-04:00</updated><id>http://localhost:4000/uprove-json-framework-overview</id><content type="html" xml:base="http://localhost:4000/2023-04-03-uprove-json-framework-overview.html"><![CDATA[<p>In this post, I’ll give an overview of the recently released <a href="https://github.com/microsoft/uprove-node-reference/blob/main/doc/U-Prove_JSON_Framework.md">U-Prove JSON Framework (UPJF)</a>, which defines how to use JSON to encode U-Prove artifacts, allowing developers to easily integrate the privacy-protecting cryptographic technology into web applications.</p>

<h1 id="u-prove-technology-overview">U-Prove Technology Overview</h1>

<p>First things first, let’s quickly review U-Prove: the cryptographic system that allows the issuance of signed tokens containing <em>selectively-disclosable</em> attributes bound to a user key pair that can be presented in an <em>unlinkable</em> manner. Let’s break down what that means:</p>
<ol>
  <li>Attributes can be of any types; think of them as claims in the JSON Web Token (JWT) world. Only the attribute values are encoded in a U-Prove token, the types (and ordering) are specified in the issuer parameters.</li>
  <li>Nothing in the token other than the encoded attributes can identify the user. In particular, the token’s public key and signatures are randomized in the issuance protocol and are never seen by the issuer.<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup> The issuer can still recognize tokens it issued (as would any verifier), but can’t determine in which issuance session they were created. As an analogy, imagine the issuer is a bank issuing dollar bills. All bills of the same denomination may look the same, but a withdrawal and spending can be linked on the basis of the bill’s unique serial number; coins on the other hand all look alike and can’t be distinguished.</li>
  <li>The user can decide, at presentation time, which attributes to disclose to a verifier. Hidden attributes are perfectly hidden, they cannot be brute-forced.</li>
</ol>

<p>The issuer creates its key pair and publishes its public parameters (including its public key and details about the to-be-issued tokens). The <a href="https://github.com/microsoft/uprove-node-reference/blob/main/doc/U-Prove_JSON_Framework.md">UPJF</a> only supports the pre-generated <a href="https://github.com/microsoft/uprove-node-reference/blob/main/doc/U-Prove%20Recommended%20Parameters%20Profile%20V1.1%20Revision%203.pdf">recommended parameters</a> which use the NIST prime-order curves (P256, P384, P521) and the issuance of tokens with a maximum of 50 attributes.</p>

<p>Multiple tokens encoding the same attributes can be issued in parallel in a single issuance session; each will have a unique key pair and signature. Tokens can be presented to verifiers by signing a message (which could be a unique challenge for access scenarios, or some application-specific data for digital signature scenarios). Token can be presented once for anonymous interactions, or reused for pseudonymous ones.</p>

<p>These core features are supported in the JSON profiles and implemented in the <a href="https://github.com/microsoft/uprove-node-reference">Typescript node library</a>, and are suitable for many web scenarios.<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup></p>

<p>For more information, check out the <a href="https://github.com/microsoft/uprove-node-reference/blob/main/doc/U-Prove%20Technology%20Overview%20V1.1%20Revision%203.pdf">technology overview</a> or if you feel adventurous, the <a href="https://github.com/microsoft/uprove-node-reference/blob/main/doc/U-Prove%20Cryptographic%20Specification%20V1.1%20Revision%205.pdf">crypto specification</a> contains all the gory details. Note that the sample values used in the post were generated using the <a href="https://github.com/microsoft/uprove-node-reference/blob/main/samples/samples.ts">JSONFrameworkSample</a> in the library.</p>

<h1 id="issuer-setup">Issuer setup</h1>

<p>The issuer first generates its parameters containing its public key, a description of which curve and generators to use, a unique identifier for the parameters, and an application-specific description of the tokens content. Here is an example of a JSON Web Key (JWK) object containing a set of issuer parameters:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"kty"</span><span class="p">:</span><span class="w"> </span><span class="s2">"UP"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"alg"</span><span class="p">:</span><span class="w"> </span><span class="s2">"UP256"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"kid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"a0A3quUdeEoIJT9R_-Ysy_kr7CTmJ2w9GSSZSHBvP3I"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"g0"</span><span class="p">:</span><span class="w"> </span><span class="s2">"BLaj8knVriRtGjLfGVg9MX1HvaPZDbhq0PmNcpxrA4oGZYoBPV-Nkcf0yfyI0mLMA10ykCj4DHKfol4T2D3HvsQ"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"spec"</span><span class="p">:</span><span class="w"> </span><span class="s2">"eyJuIjozLCJleHBUeXBlIjoiZGF5IiwiYXR0clR5cGVzIjpbIm5hbWUiLCJlbWFpbCIsIm92ZXItMjEiXX0"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>The key type <code class="highlighter-rouge">kty</code> is always set to “UP” for U-Prove.</li>
  <li>The curve and generators are identified by the <code class="highlighter-rouge">alg</code> identifier, which could be either “UP256”, “UP384”, or “UP521” (corresponding to the NIST P-256, P-384, and P-521, respectively, and the matching <a href="https://github.com/microsoft/uprove-node-reference/blob/main/doc/U-Prove%20Recommended%20Parameters%20Profile%20V1.1%20Revision%203.pdf">pre-calculated generators</a>).</li>
  <li>The key identifier <code class="highlighter-rouge">kid</code> corresponds to the issuer parameters UID which needs to be unique for the application realm. Developers can simply let the library generate these as the hash digest of the other fields.</li>
  <li><code class="highlighter-rouge">g0</code> is the issuer public key.</li>
  <li>The specification <code class="highlighter-rouge">spec</code> is a base64 encoding of a JSON object describing the content of to-be-issued tokens. Here, the value is:</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"n"</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="w">
    </span><span class="nl">"expType"</span><span class="p">:</span><span class="s2">"day"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"attrTypes"</span><span class="p">:[</span><span class="s2">"name"</span><span class="p">,</span><span class="s2">"email"</span><span class="p">,</span><span class="s2">"over-21"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>specifying that tokens will have 3 (<code class="highlighter-rouge">n</code>) attributes of type (<code class="highlighter-rouge">attrTypes</code>) “name”, “email”, and “over-21” respectively (these should be normal JWT claim types), and that the token expiration values will be measured in days (<code class="highlighter-rouge">expType</code>).</p>

<p>The <a href="https://github.com/microsoft/uprove-node-reference/blob/main/doc/U-Prove_JSON_Framework.md">UPJF</a> recommends expressing expiration dates in privacy-friendly buckets (hours, days, weeks, and years), to avoid introducing precise expiration dates that could be used to track and trace users; in this example, all expiration dates of tokens will be set to midnight after the specified number of days. We are taking great care to avoid introducing undesired correlatable values in U-Prove tokens that could break their unlinkability; this is why the issuer is committing to their structure in its parameters.<sup id="fnref:3"><a href="#fn:3" class="footnote">3</a></sup></p>

<h1 id="anatomy-of-a-u-prove-token">Anatomy of a U-Prove token</h1>

<p>U-Prove tokens have the following structure:</p>

<div align="center">
  <img src="img/uprovetoken.png" alt="U-Prove token" width="50%" /><br /><br />
</div>

<ul>
  <li>The values for the attributes 1 to <code class="highlighter-rouge">n</code> (given in the issuer parameters). The user will be able to decide which of these attributes to disclose to verifiers and which ones to hide. U-Prove tokens could have no attributes (when <code class="highlighter-rouge">n</code> = 0).</li>
  <li>The token information field contains a base64url encoding of a JSON object with claims that are always disclosed during presentation. This is useful to encode token metadata, such as an expiration date, and an issuer identifier (for example, a URL describing where to retrieve the issuer parameters; the <a href="https://github.com/microsoft/uprove-node-reference/blob/main/doc/U-Prove_JSON_Framework.md">UPJF</a> recommends publishing them at <code class="highlighter-rouge">[ISSUER_URL]/.well-known/jwks.json</code>).</li>
  <li>The prover information field contains a base64url encoding of a JSON object with claims that are always disclosed during presentation, but are unknown to the issuer. This is useful to encode a fresh challenge from a verifier while issuing on-demand tokens, or to tie a token to an external artifact that the user specifies at issuance (e.g., an encryption key).</li>
  <li>The token public key corresponds to the private key that remains secret to the user. It is generated by the user but never seen by the issuer.</li>
  <li>The issuer signature provides authenticity and integrity guarantees on the token. It is generated by the issuer but randomized by the user at issuance.</li>
</ul>

<h1 id="issuance-protocol">Issuance protocol</h1>

<p>The U-Prove issuance protocol is a 4-leg request-commitment-challenge-response exchange, initiated by the user. How the issuer authenticates the user and validates the attributes to issue is application specific. Multiple tokens encoding the same attributes can be obtained in batch.</p>

<div align="center">
  <img src="img/uprove-issuance.svg" alt="U-Prove issuance protocol" width="50%" /><br /><br />
</div>

<p>The initial token issuance request might contain user-suggested parameters, for example, the desired number of tokens and attribute values; ultimately, the issuer decides on these values.</p>

<p>The following examples show the messages for issuing 5 tokens, encoding the attribute values “Joe Example” (name), “joe@example.com” (email), and “true” (over-21), corresponding to the types specified in the issuer parameters, and a token information field encoding the following JSON object containing the URL of the issuer, and an expiration date specifying 100 days from the issuance date (counting the total number of days since the Unix epoch):</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"iss"</span><span class="p">:</span><span class="s2">"https://issuer"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"exp"</span><span class="p">:</span><span class="mi">19548</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>The first issuance message sent by the issuer (containing one shared value, and two arrays of per-token values) would look like this:</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"sZ"</span><span class="p">:</span><span class="w"> </span><span class="s2">"BMH5uVuMC9Tc+4rOKMC27UwiTc0z9n8kX93MTw1reg1dG8EB1T8zOH/OFRnyS7Q90+mOx6YuEHhXLT4mZXLaqfI="</span><span class="p">,</span><span class="w">
  </span><span class="nl">"sA"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"BMAuA4uPOURdO+S5nnw1G8m34uCfSI2XdD0fPeP/f4Vx8+FyniY4/9R9lWH06GZS6j14nfDyM0XH8tJY3cOyy40="</span><span class="p">,</span><span class="w">
    </span><span class="s2">"BILCZFHxq/C+daMwRdUltW51fTw8d2a6p05tkie3SCeAylRxpDm3yNKwKPsUTY3NSfHw4XpC6M6Cr9yxivcflmk="</span><span class="p">,</span><span class="w">
    </span><span class="s2">"BHlk5nsWKNAbuF33+FzyCtxYQE1FRP1jUUxYyHNH1fT0nqupI3PRmk3ZtW1Qjy5RLeHPji1pqgLjEZL0PpLXZrQ="</span><span class="p">,</span><span class="w">
    </span><span class="s2">"BAEVNZiaxozc8uOTw7TbyZLOZdle2/l/GCJAiLsoxZXm7k/j+ulrjUX0zZus7S1GLAjFAXg91hu+p956Hu/Vt60="</span><span class="p">,</span><span class="w">
    </span><span class="s2">"BEokpCt90Xcc126fs3gaudDdhGaKJfQffIjHFoVpcgZNkyIFrcO4nuxFVMn8AO9vaoQzsj+DhfbpRLrEELN1cdU="</span><span class="w">
  </span><span class="p">],</span><span class="w">
  </span><span class="nl">"sB"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"BBx9PkdtDgydZnVbiY4kwm9NevdUE+wyiPuR9RlCZXSBaYSvnXJGBNYO1aNpm+16QzHvYhBOYBXN9m/zHy1QcOU="</span><span class="p">,</span><span class="w">
    </span><span class="s2">"BImKvZECOGf0PM9aBQLa3mRiOmJZ/p69t4MPjerevDl0F8c/8XwcznCqgxRYXYYSv8LXKk8LvLN/YsIvdm0vVrU="</span><span class="p">,</span><span class="w">
    </span><span class="s2">"BNeSJoeb2/hRtEQlfLY9UqE12+onQIyYGELl7uXu76+S5kYdNjhiTwRrsta7B4VYMq+2akYWBvVMFvVfrim3XLI="</span><span class="p">,</span><span class="w">
    </span><span class="s2">"BEzfVQw8mfxZERCUBwLLQ2Qz2S1nyFl2Q/Q8kqG3FrAmiiADBfaGkNopgaXjLbsUuEAdkvqYwEmKPKrFInG/Ths="</span><span class="p">,</span><span class="w">
    </span><span class="s2">"BKF+fQ+KopnQTv+O+/yB3D3BSJYycaEScGd01wrIdisZjLWinSdK809adTUCm50V20feJ+C1DtdRWACSf5JiE4Q="</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>The second issuance message, sent by the user, would look like this:</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"sC"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"5hhj/QG76zXXPe1zks/H5Fsvq32jL81OBTsANhIFoRE="</span><span class="p">,</span><span class="w">
        </span><span class="s2">"SUOh117WBGAWVHZ7eOBIGUNxe9/eT6SjS1gQwBV6Lsw="</span><span class="p">,</span><span class="w">
        </span><span class="s2">"pweN4QIp72gVT53mMOrTI0RQd6HmFxLT9727qj/ZPNw="</span><span class="p">,</span><span class="w">
        </span><span class="s2">"v0RQ75GEwps/trPdzvG6NETPmf4oNlVuLRew2pFVgz8="</span><span class="p">,</span><span class="w">
        </span><span class="s2">"A8dUvtq6aXNyyqgUNM7NILoVnyRaYO1Ej1FhGhJy4mM="</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Finally, the third issuance message, sent by the issuer, looks like this:</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"sR"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"hcru+mdXDgGPnfovKr7pQtpTkLmhj11N1DkfVfRuuGQ="</span><span class="p">,</span><span class="w">
    </span><span class="s2">"8bkl56JadyLGfwa9KYoCNUoDdUTMYQEvbv1PJbPA0a4="</span><span class="p">,</span><span class="w">
    </span><span class="s2">"1J8sxxAyGSbn3WxV3enTH1e90YOQJ3lr8hw2QedDpgg="</span><span class="p">,</span><span class="w">
    </span><span class="s2">"4/Pb/94JGCGJGpNa22GjYDQMgShI1wRdXYJk0p0RQZQ="</span><span class="p">,</span><span class="w">
    </span><span class="s2">"8jT5vOUytgk1pI5/ekZtdtOk2glS1LA9ioe1s64Naos="</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>The user would then generate 5 U-Prove tokens and corresponding private keys. Here is a sample token:</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"UIDP"</span><span class="p">:</span><span class="w"> </span><span class="s2">"a0A3quUdeEoIJT9R/+Ysy/kr7CTmJ2w9GSSZSHBvP3I="</span><span class="p">,</span><span class="w">
  </span><span class="nl">"h"</span><span class="p">:</span><span class="w"> </span><span class="s2">"BPh3qOzYuhnUTaK6bJ74wRYDSbyPiFVDuB+T4tcqFvm03ayALw4u4zPUBMZmKpSvcWw00n2g5WvcKUQYUMfdyQM="</span><span class="p">,</span><span class="w">
  </span><span class="nl">"TI"</span><span class="p">:</span><span class="w"> </span><span class="s2">"eyJpc3MiOiJodHRwczovL2lzc3VlciIsImV4cCI6MTk1NDh9"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"PI"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
  </span><span class="nl">"sZp"</span><span class="p">:</span><span class="w"> </span><span class="s2">"BLwfHuKESMPexDOVuAwwPeHPSe3S9tNnRGSaD8t4ZzIUbq9Efq8Z1l0k7tNzENHU0ouQppr2RUVyjNo1c9r2R7Q="</span><span class="p">,</span><span class="w">
  </span><span class="nl">"sCp"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ZX0kIbTi78a7NhInOMQVwzGFgWdWaaJr+UkdLsaefeY="</span><span class="p">,</span><span class="w">
  </span><span class="nl">"sRp"</span><span class="p">:</span><span class="w"> </span><span class="s2">"BuhVEPOJK0g+5fQLx/eAngMp4M3OuI6eeGMNy8aAOz4="</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>where <code class="highlighter-rouge">UIDP</code> is the unique cryptographic identifier of the issuer parameters; <code class="highlighter-rouge">h</code> is the token’s public key; <code class="highlighter-rouge">TI</code> and <code class="highlighter-rouge">PI</code> are the base64url encoding of the token and prover information fields, respectively (see above for the <code class="highlighter-rouge">TI</code> value; <code class="highlighter-rouge">PI</code> is unused in this sample); and <code class="highlighter-rouge">sZp</code>, <code class="highlighter-rouge">sCp</code>, and <code class="highlighter-rouge">sRp</code> form the issuer signature.</p>

<h1 id="presentation-protocol">Presentation protocol</h1>

<p>The user can later present a U-Prove token to a verifier by using the corresponding private key to sign a presentation message; the user selects which attributes to disclose in the process. The presentation proof acts as a digital signature on the presentation message, which can contain application-specific data. To prevent replay attacks (to the same verifier, or to a different one), the message should contain an unpredictable challenge; this could for example be a verifier-specified random number, or composed of a verifier identifier, a timestamp and a nonce for non-interactive presentations.<sup id="fnref:4"><a href="#fn:4" class="footnote">4</a></sup>. Here is an example of a presentation proof, disclosing the third attribute (the “over-21” boolean), generated on a random verifier-provided challenge.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"a"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SAcAOx7nmwulPc1xxdXfBjZPW5KfEycBNA0jPvkRYMc="</span><span class="p">,</span><span class="w">
  </span><span class="nl">"r"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"0WZkALFePshcl2fxKOL0+Tr8rpN+J58gZNdYFnStymU="</span><span class="p">,</span><span class="w">
    </span><span class="s2">"/ta9XKkI4hRWvT+bWaanveKhijRJVJQup8qVIJWifA0="</span><span class="p">,</span><span class="w">
    </span><span class="s2">"FFp3WBMUzUYdP2lVNhdPHtT7XZAlEjI5KT8ClZxVUbY="</span><span class="w">
  </span><span class="p">],</span><span class="w">
  </span><span class="nl">"A"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> 
    </span><span class="nl">"3"</span><span class="p">:</span><span class="w"> </span><span class="s2">"dHJ1ZQ=="</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>The <code class="highlighter-rouge">r</code> array contains one value per hidden attributes plus an extra one, and the <code class="highlighter-rouge">A</code> object contains the disclosed attributes (in this example, the base64 encoding of the “3”<sup>rd</sup> value: “true”). <a href="https://github.com/microsoft/uprove-node-reference/blob/main/doc/U-Prove_JSON_Framework.md">UPJF</a> describes how token presentations can be encoded into a JSON Web Signature (JWS), where the header encodes the U-Prove algorithm (same as in the issuer parameters), the payload encodes the presentation message, and the signature encodes the presented U-Prove tokens and the presentation proof. Here is a sample JWS:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>eyJhbGciOiJVUDI1NiJ9.-678Cjbk8hHW8l55QgtCXw.eyJ1cHQiOnsiVUlEUCI6IjVYV3NkbGMwclhQdk94ZVRRNkF4RjY2UVJmSGxkU0N4U2VCbitreWNRdkE9IiwiaCI6IkJQY0IzSm02MXVSa3BZektjT3h4d0wvckFGVmU3L1JucjZTbmw4b01rYU1PSW42eU9zSGNIc3VjQy8xb3ZBRVEzQkdlV2lmOGpDejFXNm5pOWJUUk9yOD0iLCJUSSI6ImV5SnBjM01pT2lKb2RIUndjem92TDJsemMzVmxjaUlzSW1WNGNDSTZNVGsxTlRGOSIsIlBJIjoiIiwic1pwIjoiQkNSdWdKUzhwQnNGbG8ydzZOUXZhRkxIYzR2K1ZKSm82OGEyVGRJaDIzdVRsY3QwbHhOU3JUQnI3QlFOQ0x2S3hrMnZTV293NTlleWo5SUpBWTd2VjhrPSIsInNDcCI6ImY3eCt5VlJ5OTVJcCtvcEpJNVlUQ2drZ3BBYktYZWhIZHRFL3lBajlNbnc9Iiwic1JwIjoiVC9kdExrZ3pQZEdxYlVEdUxXMnBoQUVLcFoyWjRlakhCME1adzlXTnc2VT0ifSwicHAiOnsiYSI6ImlGblR4ZGJ0UFg2bll4UndiV0VtbGhpRXNYU25kVEVuZTEvN2ZodFkxUUE9IiwiciI6WyJqNTY0Y081d1B3R1VLcE1jZDhTS1VoYmpKVmwyaVg3a055ODF6ODIySUh3PSIsIjRRM1Y0WWFhZ1EzcENzakFTaG1wNm1lbGZ2d1dpQUllT3NuNmFzMjFsenc9IiwiWHoyTUtISklvNTdyeWlMV3RjR2Y0eTFicVcxU1NiUWswNzQ4RDQ0bzVhZz0iXSwiQSI6eyIzIjoiZEhKMVpRPT0ifX19
</code></pre></div></div>

<p>The verifier can then validate the presented U-Prove token and presentation proof, given it has access to an authentic copy of the issuer parameters. These could be retrieved directly from the issuer using the URL encoded in the token information field.</p>

<h1 id="try-it-out">Try it out!</h1>

<p>The U-Prove technology provides unique security and privacy benefits useful in many access, authentication, and attestation scenarios. The U-Prove JSON framework and its implementation in the typescript library make it easy to experiment with the technology in web environments. I’m excited to hear what use you’ll make of it; don’t be shy a engage with us on the project’s <a href="https://github.com/microsoft/uprove-node-reference/">github page</a>.</p>

<h1 id="footnotes">Footnotes</h1>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>The issuance protocol uses a technique called <a href="http://www.credentica.com/mit/Chapter4.pdf">restrictive blinding</a>, which is a generalization of blind signatures allowing them to be applied on messages known to the issuer. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>The <a href="https://github.com/microsoft/uprove-node-reference/blob/main/doc/U-Prove%20Cryptographic%20Specification%20V1.1%20Revision%205.pdf">cryptographic specification</a> (and the <a href="https://github.com/microsoft/uprove-csharp-sdk">C# SDK</a>) support more features (including device-binding, domain/scope pseudonym generation, attribute commitments), and the <a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/U-Prove20extensions20paper.pdf">extensions</a> support an even broader set of features to build more advanced credential systems (for example, proving attribute equality and non-equality, range proofs, revocation). <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>A malicious issuer could try to “tag” a target user by using different issuer parameters, or by encoding attributes differently or in a different order. Auditing/transparency systems can help with the former, and specifying the token’s content in the issuer parameters helps with the latter. <a href="#fnref:3" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>The verifier identifier prevents the proof from being replayed to a different verifier, the nonce prevents replays in general, and the timestamp limits how long nonces should be remembered by the verifier. <a href="#fnref:4" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><summary type="html"><![CDATA[In this post, I’ll give an overview of the recently released U-Prove JSON Framework (UPJF), which defines how to use JSON to encode U-Prove artifacts, allowing developers to easily integrate the privacy-protecting cryptographic technology into web applications.]]></summary></entry><entry><title type="html">Auth all the things!?! Identity technologies to prevent a privacy decline</title><link href="http://localhost:4000/2023-03-22-auth-all-the-things.html" rel="alternate" type="text/html" title="Auth all the things!?! Identity technologies to prevent a privacy decline" /><published>2023-03-22T00:00:00-04:00</published><updated>2023-03-22T00:00:00-04:00</updated><id>http://localhost:4000/auth-all-the-things</id><content type="html" xml:base="http://localhost:4000/2023-03-22-auth-all-the-things.html"><![CDATA[<blockquote>
"AI is the path of the dark bots. AI leads to fake, fake leads to auth, auth leads to surveilling."  --Yoda
</blockquote>

<p>The advances in generative AI technologies have been nothing short of remarkable. From language processing to image and video synthesis, these technologies are opening new possibilities that not too long ago felt like science fiction. However, with this innovation comes a significant challenge: how to counter malicious use of AI by threat actors. As the technology becomes better and widely available, the quantity and quality of spear phishing, deep fakes, misinformation and other malicious activities increases. It is already nearly impossible to distinguish between humans and AI generated content. The renowned New Yorker <a href="https://en.wikipedia.org/wiki/On_the_Internet,_nobody_knows_you%27re_a_dog">internet dog</a>  cartoon could use an update: “On the internet, nobody knows you are an AI-powered dog”.</p>

<div align="center">
  <img src="img/ai-powered-dog.jpg" alt="An AI-powered dog, generated by the Bing Image Creator" width="40%" /><br /><br />
</div>

<p>It is safe to assume that this situation will lead to a push for increased authentication across our online experiences, to verify the authenticity, integrity, and origin of content, and to verify the humanness of participants. The cryptographic toolbox is full of techniques to help with this, but continuous and inescapable personal and content authentication using conventional schemes would leave a digital wake leading to an unprecedented decrease in privacy, while facilitating generalized and automated surveillance. This is not how we interact in real life, and this is not how we have learned and are expecting to interact online, especially given recent privacy and data minimization trends in legislation and many services by industry; no one wants to live in a panopticon.</p>

<div align="center">
  <img src="img/auth_all_the_things.png" alt="AUTH ALL THE THINGS!" title="Original: http://hyperboleandahalf.blogspot.com/2010/06/this-is-why-ill-never-be-adult.html" width="40%" /><br />
</div>

<h2 id="privacy-enhancing-identity-technologies">Privacy-enhancing identity technologies</h2>

<p>Thankfully, we are making good progress in developing privacy-enhancing technologies that could help balance security and privacy in user and data authentication systems. We have been developing such technologies at MSR for a long time, and many are reaching a maturity level that makes them ready for standardization and wide adoption.</p>

<h3 id="selective-disclosure-of-attributes">Selective disclosure of attributes</h3>

<p>One important property in privacy-preserving identity systems is minimization of the data presented in a particular interaction. Identity credentials typically contain multiple attributes (a.k.a. claims), and we don’t necessarily need to disclose all of them in every presentation. This is not really a problem when presenting our paper credentials offline: the person checking my ID at the bar to see if I’m allowed to drink doesn’t have a photographic memory and won’t remember my address, but presenting an equivalent credential online could easily result in data misuse even for well-intended recipients.<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup> Federated protocols (such as SAML and OpenID/OAuth) aim to minimize the disclosed information by requesting only the required attributes on demand from an issuer, but this reduces the user’s autonomy and privacy vis-a-vis the issuer (while also increasing the load on the issuer’s system). There are cryptographic mechanisms to selectively present a subset of certified attributes encoded in a long-lived token, while preserving the integrity of the issuer’s signature. One hashed-based mechanism has notably made its way in the <a href="https://www.iso.org/standard/69084.html">mobile Driver License ISO standard</a>. The technique is also being standardized for JSON Web Tokens (JWT) (the most popular ID token format today) in the OAuth <a href="https://github.com/oauth-wg/oauth-selective-disclosure-jwt">Selective-Disclosure JWT</a> working group; you can experiment with the concept with my <a href="https://github.com/christianpaquin/sd-jwt">TypeScript library</a> implementation.</p>

<h3 id="unlinkability">Unlinkability</h3>

<p>Another important and perhaps more subtle property is the unlinkability between the issuance and presentation of the credentials, to prevent undesired tracking of the users activities. Conventional signatures create unique identifiers that can be used as correlation handles to link user activities. There are two mechanisms to break this bond: you can randomize either the issuance or the presentation of the credential using special cryptographic schemes.</p>

<p>One of the most promising signature schemes for randomizing presentations is Boneh-Boyen-Shacham (BBS). We are developing the specification in the Decentralized Identity Foundation <a href="https://github.com/decentralized-identity/bbs-signature">BBS signatures</a> working group. We at MSR have a <a href="https://github.com/microsoft/bbs-node-reference/">TypeScript Node</a> implementation of the algorithm that has just been updated to implement the 2nd draft submitted to the IETF. I’m excited by future improvements to the current specification following the results of this <a href="https://eprint.iacr.org/2023/275">EuroCrypt paper</a> by University of Washington’s Stefano Tessaro and Chenzhi Zhu, who analyzed the specification and proposed some optimizations.</p>

<p>Techniques for randomizing credentials at issuance include so-called blind signatures. These also made their way to standardized protocols, for example in <a href="https://github.com/ietf-wg-privacypass">privacy pass</a> allowing the issuance of anonymous tokens redeemable to avoid answering CAPTCHAs.</p>

<h3 id="new-u-prove-release">New U-Prove release</h3>

<p>One pioneering technology that we developed at MSR is <a href="https://microsoft.com/uprove">U-Prove</a>, which has a long academic history and has been prototyped and piloted in various systems. U-Prove provides both unlinkability of signatures and selective disclosure of attributes,<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup> and unlike some more recent cryptographic schemes, it uses simple, easy-to-implement mathematical building blocks, which provides high performance.<sup id="fnref:3"><a href="#fn:3" class="footnote">3</a></sup></p>

<div align="center">
  <img src="img/uprove.jpg" alt="U-Prove logo" width="30%" /><br /><br />
</div>

<p>I’m happy to announce the release of a new <a href="https://github.com/microsoft/uprove-node-reference">U-Prove Typescript library</a> and a new <a href="https://github.com/microsoft/uprove-node-reference/blob/main/doc/U-Prove_JSON_Framework.md">JSON framework</a>, which makes it easier to integrate the technology in web applications. The framework can be used directly to realize various privacy-preserving scenarios, or be integrated in higher-level frameworks such as <a href="https://github.com/json-web-proofs/json-web-proofs">JSON Web Proofs (JWP)</a> and <a href="https://www.w3.org/TR/vc-data-model/">Verifiable Credentials (VC)</a>. I’ll cover the U-Prove features and interesting use cases in future posts.</p>

<h2 id="parting-thoughts">Parting thoughts</h2>

<p>I’m very excited by the promises of the novel AI systems, and I’m optimistic that these emerging cryptographic tools will help balance security and privacy in face of these upcoming AI misuses. Now let’s get to work and start building…</p>

<p><small>
<em>AI tools were used to draft part of this text. No AI was harmed in the making of this post, at least not to my knowledge.</em>
</small></p>

<h2 id="footnotes">Footnotes</h2>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>The data could be hacked, leaked, stored forever in databases and logs, sold to 3rd parties. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>U-Prove supports more powerful disclosure techniques, such a proving a <em>property</em> of an attribute instead of disclosing it (e.g., proving that my name isn’t listed in a revocation list, or that I’m over-21 without disclosing my date of birth). See the <a href="https://www.microsoft.com/en-us/research/publication/u-prove-extensions/">U-Prove extensions</a> paper for details. <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>U-Prove uses standard elliptic curves, by default the NIST prime curves used in ECDSA. <a href="#fnref:3" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><summary type="html"><![CDATA["AI is the path of the dark bots. AI leads to fake, fake leads to auth, auth leads to surveilling." --Yoda]]></summary></entry><entry><title type="html">Hello World</title><link href="http://localhost:4000/2023-03-15-hello-world.html" rel="alternate" type="text/html" title="Hello World" /><published>2023-03-15T00:00:00-04:00</published><updated>2023-03-15T00:00:00-04:00</updated><id>http://localhost:4000/hello-world</id><content type="html" xml:base="http://localhost:4000/2023-03-15-hello-world.html"><![CDATA[<p>Hello World!</p>

<p>To echo the words from the <a href="/about/">about</a> page:
I’m cryptography engineer at Microsoft Research (my <a href="https://www.microsoft.com/en-us/research/people/cpaquin/">MSR page</a>) where I aim to bring new research innovations closer to reality. I’ll be using this space to share news and insights about my work on identity, security, and cryptography.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Hello World!]]></summary></entry></feed>